"""
Message formatting for Telegram notifications
"""

import logging
from typing import Dict, Any, Optional
from datetime import datetime
import json

logger = logging.getLogger(__name__)

class MessageFormatter:
    """Format trading signals and notifications for Telegram"""
    
    @staticmethod
    def format_trading_signal(signal_data: Dict[str, Any]) -> str:
        """Format trading signal for Telegram"""
        try:
            # Extract signal information
            signal_type = signal_data.get('signal', 'HOLD').upper()
            symbol = signal_data.get('symbol', 'UNKNOWN')
            price = signal_data.get('entry_price', 0)
            confidence = signal_data.get('confidence', 0)
            reasoning = signal_data.get('reasoning', 'No reasoning provided')
            stop_loss = signal_data.get('stop_loss')
            take_profit = signal_data.get('take_profit')
            risk_reward = signal_data.get('risk_reward_ratio', 0)
            timestamp = signal_data.get('timestamp', datetime.utcnow())
            
            # Format timestamp
            if isinstance(timestamp, str):
                timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            time_str = timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')
            
            # Signal emoji
            signal_emoji = {
                'BUY': '🟢',
                'SELL': '🔴', 
                'HOLD': '🟡'
            }.get(signal_type, '⚪')
            
            # Confidence emoji
            if confidence >= 80:
                confidence_emoji = '🔥'
            elif confidence >= 60:
                confidence_emoji = '⚡'
            else:
                confidence_emoji = '⚠️'
            
            # Build message
            message = f"""
{signal_emoji} <b>[{signal_type}] {symbol}</b> {confidence_emoji}

💰 <b>Entry Price:</b> {price:.5f}
📊 <b>Confidence:</b> {confidence}%
⏰ <b>Time:</b> {time_str}

<b>📋 Analysis:</b>
{reasoning}
"""
            
            # Add risk management if available
            if stop_loss and take_profit:
                message += f"""
🛡️ <b>Risk Management:</b>
• Stop Loss: {stop_loss:.5f}
• Take Profit: {take_profit:.5f}
• Risk/Reward: 1:{risk_reward:.2f}
"""
            
            # Add market structure info if available
            market_structure = signal_data.get('market_structure', {})
            if market_structure:
                message += f"\n🏗️ <b>Market Structure:</b>\n"
                if market_structure.get('trend'):
                    message += f"• Trend: {market_structure['trend']}\n"
                if market_structure.get('key_levels'):
                    levels = market_structure['key_levels']
                    message += f"• Support: {levels.get('support', 'N/A')}\n"
                    message += f"• Resistance: {levels.get('resistance', 'N/A')}\n"
            
            # Add technical indicators summary
            indicators = signal_data.get('indicators_summary', {})
            if indicators:
                message += f"\n📈 <b>Key Indicators:</b>\n"
                for indicator, value in indicators.items():
                    if isinstance(value, (int, float)):
                        message += f"• {indicator}: {value:.2f}\n"
                    else:
                        message += f"• {indicator}: {value}\n"
            
            message += f"\n<i>Generated by Flask Trading System</i>"
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting trading signal: {str(e)}")
            return f"Error formatting signal for {signal_data.get('symbol', 'UNKNOWN')}"
    
    @staticmethod
    def format_performance_update(performance_data: Dict[str, Any]) -> str:
        """Format performance update for Telegram"""
        try:
            period = performance_data.get('period', '24h')
            win_rate = performance_data.get('win_rate', 0)
            total_signals = performance_data.get('total_signals', 0)
            total_pnl = performance_data.get('total_pnl', 0)
            best_pair = performance_data.get('best_performing_pair', 'N/A')
            
            pnl_emoji = '📈' if total_pnl >= 0 else '📉'
            
            message = f"""
📊 <b>Performance Update ({period})</b>

{pnl_emoji} <b>Total P&L:</b> {total_pnl:+.2f}
🎯 <b>Win Rate:</b> {win_rate:.1f}%
📡 <b>Total Signals:</b> {total_signals}
🏆 <b>Best Pair:</b> {best_pair}

<i>Keep trading smart! 💪</i>
"""
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting performance update: {str(e)}")
            return "Error formatting performance update"
    
    @staticmethod
    def format_market_alert(alert_data: Dict[str, Any]) -> str:
        """Format market alert for Telegram"""
        try:
            alert_type = alert_data.get('type', 'INFO')
            symbol = alert_data.get('symbol', 'MARKET')
            message_text = alert_data.get('message', 'Market alert')
            severity = alert_data.get('severity', 'medium')
            
            # Alert emoji based on type and severity
            alert_emojis = {
                'HIGH_VOLATILITY': '⚡',
                'BREAKOUT': '🚀',
                'REVERSAL': '🔄',
                'NEWS': '📰',
                'ERROR': '❌',
                'WARNING': '⚠️',
                'INFO': 'ℹ️'
            }
            
            severity_emojis = {
                'high': '🔴',
                'medium': '🟡',
                'low': '🟢'
            }
            
            alert_emoji = alert_emojis.get(alert_type, 'ℹ️')
            severity_emoji = severity_emojis.get(severity, '🟡')
            
            message = f"""
{alert_emoji} <b>Market Alert</b> {severity_emoji}

📍 <b>Symbol:</b> {symbol}
🔔 <b>Type:</b> {alert_type.replace('_', ' ').title()}

<b>Message:</b>
{message_text}

⏰ <b>Time:</b> {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}
"""
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting market alert: {str(e)}")
            return "Error formatting market alert"
    
    @staticmethod
    def format_system_status(status_data: Dict[str, Any]) -> str:
        """Format system status update for Telegram"""
        try:
            status = status_data.get('status', 'UNKNOWN')
            uptime = status_data.get('uptime', 'N/A')
            active_pairs = status_data.get('active_pairs', [])
            last_signal = status_data.get('last_signal_time', 'N/A')
            api_status = status_data.get('api_status', {})
            
            status_emoji = {
                'ONLINE': '🟢',
                'OFFLINE': '🔴',
                'MAINTENANCE': '🟡',
                'ERROR': '❌'
            }.get(status, '⚪')
            
            message = f"""
{status_emoji} <b>System Status: {status}</b>

⏱️ <b>Uptime:</b> {uptime}
📊 <b>Active Pairs:</b> {len(active_pairs)}
🕐 <b>Last Signal:</b> {last_signal}

<b>📡 API Status:</b>
"""
            
            for api_name, api_status_info in api_status.items():
                api_emoji = '🟢' if api_status_info.get('status') == 'OK' else '🔴'
                message += f"• {api_name}: {api_emoji} {api_status_info.get('status', 'UNKNOWN')}\n"
            
            if active_pairs:
                message += f"\n<b>🎯 Monitoring:</b> {', '.join(active_pairs[:5])}"
                if len(active_pairs) > 5:
                    message += f" (+{len(active_pairs) - 5} more)"
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting system status: {str(e)}")
            return "Error formatting system status"
    
    @staticmethod
    def format_error_notification(error_data: Dict[str, Any]) -> str:
        """Format error notification for Telegram"""
        try:
            error_type = error_data.get('type', 'UNKNOWN_ERROR')
            error_message = error_data.get('message', 'An error occurred')
            component = error_data.get('component', 'System')
            timestamp = error_data.get('timestamp', datetime.utcnow())
            
            if isinstance(timestamp, str):
                timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            time_str = timestamp.strftime('%Y-%m-%d %H:%M:%S UTC')
            
            message = f"""
❌ <b>System Error Alert</b>

🔧 <b>Component:</b> {component}
⚠️ <b>Error Type:</b> {error_type}
⏰ <b>Time:</b> {time_str}

<b>Details:</b>
{error_message}

<i>Please check system logs for more information.</i>
"""
            
            return message
            
        except Exception as e:
            logger.error(f"Error formatting error notification: {str(e)}")
            return f"Critical error in notification system: {str(e)}"
